# automatically generated by the FlatBuffers compiler, do not modify

# namespace: loadable

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TaskListEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskListEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTaskListEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TaskListEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TaskListEntry
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # TaskListEntry
    def Interface(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TaskListEntry
    def Instance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # TaskListEntry
    def AddressList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # TaskListEntry
    def AddressListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # TaskListEntry
    def AddressListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskListEntry
    def AddressListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # TaskListEntry
    def PreActions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # TaskListEntry
    def PreActionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # TaskListEntry
    def PreActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskListEntry
    def PreActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # TaskListEntry
    def PostActions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # TaskListEntry
    def PostActionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # TaskListEntry
    def PostActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskListEntry
    def PostActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def TaskListEntryStart(builder):
    builder.StartObject(6)

def Start(builder):
    TaskListEntryStart(builder)

def TaskListEntryAddId(builder, id):
    builder.PrependUint16Slot(0, id, 0)

def AddId(builder, id):
    TaskListEntryAddId(builder, id)

def TaskListEntryAddInterface(builder, interface):
    builder.PrependUint32Slot(1, interface, 0)

def AddInterface(builder, interface):
    TaskListEntryAddInterface(builder, interface)

def TaskListEntryAddInstance(builder, instance):
    builder.PrependInt16Slot(2, instance, 0)

def AddInstance(builder, instance):
    TaskListEntryAddInstance(builder, instance)

def TaskListEntryAddAddressList(builder, addressList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(addressList), 0)

def AddAddressList(builder, addressList):
    TaskListEntryAddAddressList(builder, addressList)

def TaskListEntryStartAddressListVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartAddressListVector(builder, numElems):
    return TaskListEntryStartAddressListVector(builder, numElems)

def TaskListEntryAddPreActions(builder, preActions):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(preActions), 0)

def AddPreActions(builder, preActions):
    TaskListEntryAddPreActions(builder, preActions)

def TaskListEntryStartPreActionsVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartPreActionsVector(builder, numElems):
    return TaskListEntryStartPreActionsVector(builder, numElems)

def TaskListEntryAddPostActions(builder, postActions):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(postActions), 0)

def AddPostActions(builder, postActions):
    TaskListEntryAddPostActions(builder, postActions)

def TaskListEntryStartPostActionsVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartPostActionsVector(builder, numElems):
    return TaskListEntryStartPostActionsVector(builder, numElems)

def TaskListEntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return TaskListEntryEnd(builder)
