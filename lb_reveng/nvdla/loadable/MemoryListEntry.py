# automatically generated by the FlatBuffers compiler, do not modify

# namespace: loadable

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MemoryListEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MemoryListEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMemoryListEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MemoryListEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MemoryListEntry
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # MemoryListEntry
    def Domain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # MemoryListEntry
    def Flags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # MemoryListEntry
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MemoryListEntry
    def Alignment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MemoryListEntry
    def Contents(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MemoryListEntry
    def ContentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MemoryListEntry
    def ContentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # MemoryListEntry
    def Offsets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MemoryListEntry
    def OffsetsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # MemoryListEntry
    def OffsetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MemoryListEntry
    def OffsetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # MemoryListEntry
    def BindId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # MemoryListEntry
    def TensorDescId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def MemoryListEntryStart(builder):
    builder.StartObject(9)

def Start(builder):
    MemoryListEntryStart(builder)

def MemoryListEntryAddId(builder, id):
    builder.PrependUint16Slot(0, id, 0)

def AddId(builder, id):
    MemoryListEntryAddId(builder, id)

def MemoryListEntryAddDomain(builder, domain):
    builder.PrependUint8Slot(1, domain, 0)

def AddDomain(builder, domain):
    MemoryListEntryAddDomain(builder, domain)

def MemoryListEntryAddFlags(builder, flags):
    builder.PrependUint16Slot(2, flags, 0)

def AddFlags(builder, flags):
    MemoryListEntryAddFlags(builder, flags)

def MemoryListEntryAddSize(builder, size):
    builder.PrependUint64Slot(3, size, 0)

def AddSize(builder, size):
    MemoryListEntryAddSize(builder, size)

def MemoryListEntryAddAlignment(builder, alignment):
    builder.PrependUint32Slot(4, alignment, 0)

def AddAlignment(builder, alignment):
    MemoryListEntryAddAlignment(builder, alignment)

def MemoryListEntryAddContents(builder, contents):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(contents), 0)

def AddContents(builder, contents):
    MemoryListEntryAddContents(builder, contents)

def MemoryListEntryStartContentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartContentsVector(builder, numElems):
    return MemoryListEntryStartContentsVector(builder, numElems)

def MemoryListEntryAddOffsets(builder, offsets):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(offsets), 0)

def AddOffsets(builder, offsets):
    MemoryListEntryAddOffsets(builder, offsets)

def MemoryListEntryStartOffsetsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartOffsetsVector(builder, numElems):
    return MemoryListEntryStartOffsetsVector(builder, numElems)

def MemoryListEntryAddBindId(builder, bindId):
    builder.PrependUint16Slot(7, bindId, 0)

def AddBindId(builder, bindId):
    MemoryListEntryAddBindId(builder, bindId)

def MemoryListEntryAddTensorDescId(builder, tensorDescId):
    builder.PrependUint16Slot(8, tensorDescId, 0)

def AddTensorDescId(builder, tensorDescId):
    MemoryListEntryAddTensorDescId(builder, tensorDescId)

def MemoryListEntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return MemoryListEntryEnd(builder)
