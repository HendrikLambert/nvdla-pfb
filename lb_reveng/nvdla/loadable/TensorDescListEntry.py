# automatically generated by the FlatBuffers compiler, do not modify

# namespace: loadable

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TensorDescListEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TensorDescListEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTensorDescListEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TensorDescListEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TensorDescListEntry
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TensorDescListEntry
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def MemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def DataFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def DataCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def PixelFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def PixelMapping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def N(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def C(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def H(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Stride0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Stride1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Stride2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Stride3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Stride4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Stride5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Stride6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TensorDescListEntry
    def Stride7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TensorDescListEntryStart(builder):
    builder.StartObject(22)

def Start(builder):
    TensorDescListEntryStart(builder)

def TensorDescListEntryAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    TensorDescListEntryAddName(builder, name)

def TensorDescListEntryAddId(builder, id):
    builder.PrependUint16Slot(1, id, 0)

def AddId(builder, id):
    TensorDescListEntryAddId(builder, id)

def TensorDescListEntryAddMemId(builder, memId):
    builder.PrependUint16Slot(2, memId, 0)

def AddMemId(builder, memId):
    TensorDescListEntryAddMemId(builder, memId)

def TensorDescListEntryAddSize(builder, size):
    builder.PrependUint64Slot(3, size, 0)

def AddSize(builder, size):
    TensorDescListEntryAddSize(builder, size)

def TensorDescListEntryAddOffset(builder, offset):
    builder.PrependUint64Slot(4, offset, 0)

def AddOffset(builder, offset):
    TensorDescListEntryAddOffset(builder, offset)

def TensorDescListEntryAddDataFormat(builder, dataFormat):
    builder.PrependUint8Slot(5, dataFormat, 0)

def AddDataFormat(builder, dataFormat):
    TensorDescListEntryAddDataFormat(builder, dataFormat)

def TensorDescListEntryAddDataType(builder, dataType):
    builder.PrependUint8Slot(6, dataType, 0)

def AddDataType(builder, dataType):
    TensorDescListEntryAddDataType(builder, dataType)

def TensorDescListEntryAddDataCategory(builder, dataCategory):
    builder.PrependUint8Slot(7, dataCategory, 0)

def AddDataCategory(builder, dataCategory):
    TensorDescListEntryAddDataCategory(builder, dataCategory)

def TensorDescListEntryAddPixelFormat(builder, pixelFormat):
    builder.PrependUint8Slot(8, pixelFormat, 0)

def AddPixelFormat(builder, pixelFormat):
    TensorDescListEntryAddPixelFormat(builder, pixelFormat)

def TensorDescListEntryAddPixelMapping(builder, pixelMapping):
    builder.PrependUint8Slot(9, pixelMapping, 0)

def AddPixelMapping(builder, pixelMapping):
    TensorDescListEntryAddPixelMapping(builder, pixelMapping)

def TensorDescListEntryAddN(builder, n):
    builder.PrependInt32Slot(10, n, 0)

def AddN(builder, n):
    TensorDescListEntryAddN(builder, n)

def TensorDescListEntryAddC(builder, c):
    builder.PrependInt32Slot(11, c, 0)

def AddC(builder, c):
    TensorDescListEntryAddC(builder, c)

def TensorDescListEntryAddH(builder, h):
    builder.PrependInt32Slot(12, h, 0)

def AddH(builder, h):
    TensorDescListEntryAddH(builder, h)

def TensorDescListEntryAddW(builder, w):
    builder.PrependInt32Slot(13, w, 0)

def AddW(builder, w):
    TensorDescListEntryAddW(builder, w)

def TensorDescListEntryAddStride0(builder, stride0):
    builder.PrependUint32Slot(14, stride0, 0)

def AddStride0(builder, stride0):
    TensorDescListEntryAddStride0(builder, stride0)

def TensorDescListEntryAddStride1(builder, stride1):
    builder.PrependUint32Slot(15, stride1, 0)

def AddStride1(builder, stride1):
    TensorDescListEntryAddStride1(builder, stride1)

def TensorDescListEntryAddStride2(builder, stride2):
    builder.PrependUint32Slot(16, stride2, 0)

def AddStride2(builder, stride2):
    TensorDescListEntryAddStride2(builder, stride2)

def TensorDescListEntryAddStride3(builder, stride3):
    builder.PrependUint32Slot(17, stride3, 0)

def AddStride3(builder, stride3):
    TensorDescListEntryAddStride3(builder, stride3)

def TensorDescListEntryAddStride4(builder, stride4):
    builder.PrependUint32Slot(18, stride4, 0)

def AddStride4(builder, stride4):
    TensorDescListEntryAddStride4(builder, stride4)

def TensorDescListEntryAddStride5(builder, stride5):
    builder.PrependUint32Slot(19, stride5, 0)

def AddStride5(builder, stride5):
    TensorDescListEntryAddStride5(builder, stride5)

def TensorDescListEntryAddStride6(builder, stride6):
    builder.PrependUint32Slot(20, stride6, 0)

def AddStride6(builder, stride6):
    TensorDescListEntryAddStride6(builder, stride6)

def TensorDescListEntryAddStride7(builder, stride7):
    builder.PrependUint32Slot(21, stride7, 0)

def AddStride7(builder, stride7):
    TensorDescListEntryAddStride7(builder, stride7)

def TensorDescListEntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return TensorDescListEntryEnd(builder)
