# automatically generated by the FlatBuffers compiler, do not modify

# namespace: loadable

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Blob(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Blob()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBlob(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Blob
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Blob
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Blob
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Blob
    def Interface(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Blob
    def SubInterface(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Blob
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from nvdla.loadable.Version import Version
            obj = Version()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Blob
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Blob
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Blob
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Blob
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def BlobStart(builder):
    builder.StartObject(6)

def Start(builder):
    BlobStart(builder)

def BlobAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    BlobAddName(builder, name)

def BlobAddSize(builder, size):
    builder.PrependUint64Slot(1, size, 0)

def AddSize(builder, size):
    BlobAddSize(builder, size)

def BlobAddInterface(builder, interface):
    builder.PrependUint32Slot(2, interface, 0)

def AddInterface(builder, interface):
    BlobAddInterface(builder, interface)

def BlobAddSubInterface(builder, subInterface):
    builder.PrependUint32Slot(3, subInterface, 0)

def AddSubInterface(builder, subInterface):
    BlobAddSubInterface(builder, subInterface)

def BlobAddVersion(builder, version):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)

def AddVersion(builder, version):
    BlobAddVersion(builder, version)

def BlobAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    BlobAddData(builder, data)

def BlobStartDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartDataVector(builder, numElems):
    return BlobStartDataVector(builder, numElems)

def BlobEnd(builder):
    return builder.EndObject()

def End(builder):
    return BlobEnd(builder)
