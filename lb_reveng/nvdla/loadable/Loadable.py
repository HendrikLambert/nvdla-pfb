# automatically generated by the FlatBuffers compiler, do not modify

# namespace: loadable

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Loadable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Loadable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLoadable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Loadable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Loadable
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from nvdla.loadable.Version import Version
            obj = Version()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Loadable
    def TaskList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from nvdla.loadable.TaskListEntry import TaskListEntry
            obj = TaskListEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Loadable
    def TaskListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Loadable
    def TaskListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Loadable
    def MemoryList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from nvdla.loadable.MemoryListEntry import MemoryListEntry
            obj = MemoryListEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Loadable
    def MemoryListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Loadable
    def MemoryListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Loadable
    def AddressList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from nvdla.loadable.AddressListEntry import AddressListEntry
            obj = AddressListEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Loadable
    def AddressListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Loadable
    def AddressListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Loadable
    def EventList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from nvdla.loadable.EventListEntry import EventListEntry
            obj = EventListEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Loadable
    def EventListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Loadable
    def EventListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Loadable
    def Blobs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from nvdla.loadable.Blob import Blob
            obj = Blob()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Loadable
    def BlobsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Loadable
    def BlobsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Loadable
    def TensorDescList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from nvdla.loadable.TensorDescListEntry import TensorDescListEntry
            obj = TensorDescListEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Loadable
    def TensorDescListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Loadable
    def TensorDescListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Loadable
    def RelocList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from nvdla.loadable.RelocListEntry import RelocListEntry
            obj = RelocListEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Loadable
    def RelocListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Loadable
    def RelocListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Loadable
    def SubmitList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from nvdla.loadable.SubmitListEntry import SubmitListEntry
            obj = SubmitListEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Loadable
    def SubmitListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Loadable
    def SubmitListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def LoadableStart(builder):
    builder.StartObject(9)

def Start(builder):
    LoadableStart(builder)

def LoadableAddVersion(builder, version):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)

def AddVersion(builder, version):
    LoadableAddVersion(builder, version)

def LoadableAddTaskList(builder, taskList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskList), 0)

def AddTaskList(builder, taskList):
    LoadableAddTaskList(builder, taskList)

def LoadableStartTaskListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTaskListVector(builder, numElems):
    return LoadableStartTaskListVector(builder, numElems)

def LoadableAddMemoryList(builder, memoryList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(memoryList), 0)

def AddMemoryList(builder, memoryList):
    LoadableAddMemoryList(builder, memoryList)

def LoadableStartMemoryListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMemoryListVector(builder, numElems):
    return LoadableStartMemoryListVector(builder, numElems)

def LoadableAddAddressList(builder, addressList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(addressList), 0)

def AddAddressList(builder, addressList):
    LoadableAddAddressList(builder, addressList)

def LoadableStartAddressListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAddressListVector(builder, numElems):
    return LoadableStartAddressListVector(builder, numElems)

def LoadableAddEventList(builder, eventList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(eventList), 0)

def AddEventList(builder, eventList):
    LoadableAddEventList(builder, eventList)

def LoadableStartEventListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEventListVector(builder, numElems):
    return LoadableStartEventListVector(builder, numElems)

def LoadableAddBlobs(builder, blobs):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(blobs), 0)

def AddBlobs(builder, blobs):
    LoadableAddBlobs(builder, blobs)

def LoadableStartBlobsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBlobsVector(builder, numElems):
    return LoadableStartBlobsVector(builder, numElems)

def LoadableAddTensorDescList(builder, tensorDescList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tensorDescList), 0)

def AddTensorDescList(builder, tensorDescList):
    LoadableAddTensorDescList(builder, tensorDescList)

def LoadableStartTensorDescListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTensorDescListVector(builder, numElems):
    return LoadableStartTensorDescListVector(builder, numElems)

def LoadableAddRelocList(builder, relocList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(relocList), 0)

def AddRelocList(builder, relocList):
    LoadableAddRelocList(builder, relocList)

def LoadableStartRelocListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRelocListVector(builder, numElems):
    return LoadableStartRelocListVector(builder, numElems)

def LoadableAddSubmitList(builder, submitList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(submitList), 0)

def AddSubmitList(builder, submitList):
    LoadableAddSubmitList(builder, submitList)

def LoadableStartSubmitListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSubmitListVector(builder, numElems):
    return LoadableStartSubmitListVector(builder, numElems)

def LoadableEnd(builder):
    return builder.EndObject()

def End(builder):
    return LoadableEnd(builder)
